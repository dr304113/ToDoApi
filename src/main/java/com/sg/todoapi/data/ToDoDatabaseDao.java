package com.sg.todoapi.data;

import com.sg.todoapi.models.ToDo;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Profile;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.stereotype.Repository;

/**
 *
 * @author dr304
 */
@Repository
@Profile("database")
public class ToDoDatabaseDao implements ToDoDao {

    //DB connectivity Template for reusability
    private final JdbcTemplate jdbcTemplate;

    //Constructor for Dependency Injection/Getting bean
    //@Autowired on the constructor asks Spring DI for a JdbcTemplate
    @Autowired
    public ToDoDatabaseDao(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    @Override
    public ToDo add(ToDo todo) {
        //"Id" auto generated by DB & "finished" is boolean w/ default = false;
        final String sql = "INSERT INTO todo(todo, note) VALUES(?,?);";

        //A "GeneratedKeyHolder" for grabbing keys generated by DB
        GeneratedKeyHolder keyHolder = new GeneratedKeyHolder();

        // Takes two parameters: a PreparedStatementCreator and a KeyHolder
        //A PreparedStatement generates PreparedStatement from a Connection(conn) 
        //This lambda is an unnamed method that takes a Connection as a parameter and returns a completed PreparedStatement.
        jdbcTemplate.update((Connection conn) -> {
            //A Connection helps to establish a connection with the database.
            //PreparedStatement object provides a feature to execute a parameterized query
            PreparedStatement statement = conn.prepareStatement(
                    sql, Statement.RETURN_GENERATED_KEYS);

            statement.setString(1, todo.getTodo());
            statement.setString(2, todo.getNote());
            return statement;
        }, keyHolder);

        todo.setId(keyHolder.getKey().intValue());

        return todo;
    }

    //Returns results so the ToDoMapper must be used
    @Override
    public List<ToDo> getAll() {
        final String sql = "SELECT id, todo, note, finished FROM todo;";
        return jdbcTemplate.query(sql, new ToDoMapper());
    }

    //Returns results so the ToDoMapper must be used
    @Override
    public ToDo findById(int id) {
        final String sql = "SELECT id, todo, note, finished FROM todo WHERE id = ?;";
        return jdbcTemplate.queryForObject(sql, new ToDoMapper(), id);
    }

    //ToDoMapper not necessary, no results being returned
    //Returning Boolean if update was successful
    @Override
    public boolean update(ToDo todo) {
        final String sql = "UPDATE todo SET todo = ?, note = ?, finished = ? WHERE id = ?;";
        return jdbcTemplate.update(sql, todo.getTodo(), todo.getNote(), todo.isFinished(), todo.getId()) > 0;
    }

    //ToDoMapper not necessary, no results being returned
    //Returning Boolean if update was successful
    @Override
    public boolean deleteById(int id) {
        final String sql = "DELETE FROM todo WHERE id = ?;";
        return jdbcTemplate.update(sql, id) > 0;
    }

    //Reusable RowMapper
    //Implements RowMapper with object to be returned in overidden method in class
    private final class ToDoMapper implements RowMapper<ToDo> {

        @Override
        public ToDo mapRow(ResultSet rs, int index) throws SQLException {
            ToDo td = new ToDo();
            td.setId(rs.getInt("id"));
            td.setTodo(rs.getString("todo"));
            td.setNote(rs.getString("note"));
            td.setFinished(rs.getBoolean("finished"));
            return td;
        }
    }

}
